#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass report
\language english
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter lmtt
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing double
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
\paragraph_spacing double
Implementation
\end_layout

\begin_layout Section
The Agents
\end_layout

\begin_layout Standard
Taxis and Fares are subclasses of a common Agent class.
 The Agent class sets a mapping type to either grid or graph and sets the
 subclassed Agent's initial location on the grid or graph, respectively.
 The Agent also defines a queue to hold waiting Fares.
 It is a static class attribute that holds only Fares, but it is used by
 both Agent types.
 The Taxi queries this list when it decides what to do next.
 Exactly what the Taxi is looking for is dependent on which negotiation
 protocol (FIFO, closestFare or mixedMode) and which simulation type (competitiv
e or cooperative) is running.
\end_layout

\begin_layout Standard
But the Agent also subclasses SimPy's Process class, which provides a means
 for SimPy to manipulate the Agents during discrete-event simulation.
 Process objects must provide a method called the Process Execution Method
 (PEM) that is invoked by the simulation toolkit to activate the object.
 When the PEM exits, the Process object is destroyed.
 The PEM is where the simulated object's behaviors are defined.
 
\end_layout

\begin_layout Standard
The lifecycle of a Fare is simple.
 It begins when the Fare is created, and ends when it is dropped off at
 its destination by a Taxi, or the simulation ends, whichever comes first.
 Fares are created throughout the simulation.
 Their generation rate is configurable; it is the inverse of an exponential
 distribution (see meanFareGenerationRate in 
\begin_inset LatexCommand ref
reference "sec:The-agents-default.ini"

\end_inset

).
 The Fare uses the same PEM for all simulations.
 It collects timestamped event data starting with the initial request for
 pickup; then again when it is picked up; and finally when it is dropped
 off.
\begin_inset Foot
status open

\begin_layout Standard
One of the difficulties that came up during data collection for analysis
 was accounting for Fares that are left in the wait queue at the end of
 the simulation.
 This is covered in the results section.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Taxi class is more complex than the Fares, as it holds most of the logic
 for using the different negotiation protocols and simulation types.
 Leaving the NPs and simtypes aside for now, the lifecycle of the Taxis
 is similar to that of the Fares.
 
\end_layout

\begin_layout Standard
I'll describe the NPs and simtypes later.
\end_layout

\begin_layout Standard
One of the interesting things about working with autonomous agents is seeing
 what happens when an Agent has incomplete system knowledge.
 An earlier version of the program had an additional signal event when the
 Fare received an acknowledgment of pending pickup from the Taxi.
 This only made sense with cooperative simulations due to the way the Taxis
 process pickup requests, so I left it out.
 While a Taxi is en-route with a Fare, it may receive requests for pickup,
 but may not act on them.
 So while a Taxi may be the first one available for hire, he may not necessarily
 be the first one to reach the Fare, since another Taxi may be closer to
 the Fare, but currently ineligible to respond.
 If the second Taxi drops off his Fare and reaches the Fare first, the first
 Taxi's acknowledgment would be considered an error, based on his limited
 knowledge of the other Agents.
 
\end_layout

\begin_layout Standard
The Taxis, on the other hand, are created at the start of the simulation,
 and are active until the simulation ends.
\end_layout

\begin_layout Standard
The Fare's PEM is run().
 
\end_layout

\begin_layout Standard
The Fare is 
\end_layout

\begin_layout Standard
In order to for the Taxis and Fares to participate in discrete-event simulation,
 they must subclass SimPy's Process class.
 But Taxis and Fares have some common functionality, so they both subclass
 a small Agent class, which contains no methods and does little more than
 set some environmental options.
 This Agent class is a subclass of SimPy's Process.
\end_layout

\begin_layout Standard
\paragraph_spacing double
TEST implementation.
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
data prep - grid
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
data prep - graphs
\end_layout

\begin_deeper
\begin_layout Enumerate
\paragraph_spacing double
get FIPS
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
process lat/lon data
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
make graph
\end_layout

\begin_deeper
\begin_layout Enumerate
\paragraph_spacing double
describe algorithm for connecting nodes
\end_layout

\end_deeper
\begin_layout Enumerate
\paragraph_spacing double
little bit of graph theory
\end_layout

\begin_deeper
\begin_layout Enumerate
\paragraph_spacing double
streets and roads are [ 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset

 ]
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
intersections are [ 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset

 ]
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
slightly fuzzy math (but well within tolerance of size of intersection).
 IOW, if lat/lon data is good to 6 decimal places, that equates to a length
 of, say, 3 feet.
 But an intersection is at least 20 feet across, so the accuracy is good
 enough to correctly locate each [ node or vertex ] intersection as equating
 to a geographical (street level) intersection.
\end_layout

\end_deeper
\begin_layout Enumerate
\paragraph_spacing double
generating plots
\end_layout

\end_deeper
\begin_layout Enumerate
\paragraph_spacing double

\end_layout

\end_body
\end_document
