# This is overrides.ini.
#
# Like default.ini, this file contains the entire list of options.  But that
# file is intended to be read-only.  Please make all simulation configuration
# changes here.

[runtime]
# useGUI: boolean.  Flag to specify whether or not to produce graphical
# results.  This is a top-level option.  If it is False, ________ is ignored.
# Default: False.
#useGUI = True

# mapType: string.  Valid values are grid or graph.  If grid, the simulation
# area is a square grid bounded by GRID_MIN and GRID_MAX.  If graph, TIGER
# data is chosen by the user and the graph is populated dynamically.  Default:
# grid.
mapType = grid

# verbose: boolean.  How much data do you want to see at runtime?  Note, if
# verbose is False, prettyPrint is ignored.  Default: False.
#verbose = True

# prettyPrint: boolean.  Flag to set printing options.  Note, this option is
# ignored if verbose is False.  Valid values are True or False.  Default:
# False
#prettyPrint = True

# numTaxis: int.  This is the TOTAL number of Taxis that this simulation will
# use.  They are all created at the start of the simulation.  NOTE: setting
# this value to 0 will cause the program to crash with an IndexError.  Valid
# values are positive integers (1 and up).  Default: 5
#numTaxis = 6

# numFares: int.  This is the number of Fares that are generated at the START
# of the simulation, before the simulation is activated.  Other Fares will be
# created when the simulation runs, at an average rate specified below
# (meanFareGenerationRate).  If you want all Fares to be created after the
# simulation has started, just set this value to 0.  Valid values are
# non-negative integers (0 and up).  Default: 5
#numFares = 0

# meanFareGenerationRate:  int.  This is the average rate at which Fares will
# be created after the simulation is running.  If the mean is 0, no Fares will
# be created.  If the mean is very low, Fares will be created very rapidly.
# Conversely, if the mean is high (say, over 30 or so), Fares will be created
# relatively slowly.  Valid values are non-negative integers (0 and up).
# Default: 7
meanFareGenerationRate = 15

# storeCapacity: int.  The Store is a SimPy Resource that holds (in this case)
# Fares waiting for pickup.  If a Taxi is unable to find an eligible Fare from
# the queue of waiting Fares, it winds up in here until an eligible Fare comes
# along.  Valid values are non-negative integers.  Default: 40.
#storeCapacity = 40

# simulationTime: int.  Valid values are non-negative integers (0 and up).
# Default: 100
simulationTime = 500

# gridMin: int.  Minimum grid size, in other words, the origin.  Valid values
# are non-negative integers (0 and up), although anything other than 0
# currently doesn't make much sense.  Default: 0
#gridMin = 0

# gridMax: int.  Maximum grid size, in other words, the (x,y) at the upper
# right hand corner.  Valid values are gridMin or higher.  Default: 100
gridMax = 50

# taxiRangeLow: float.  When running in mixedmode, the Taxi uses this value to
# determine if the Fares have been in the queue only long enough to send local
# broadcasts.  Valid values are (0.0 to taxiRangeMedium)  Default: .25
taxiRangeLow = .35

# taxiRangeMedium: float.  When running in mixedmode, the Taxi uses this value
# to determine if the Fares have been in the queue long enough to send
# regional broadcasts.  Valid values are (taxiRangeLow to taxiRangeMedium).
# Default: .50
taxiRangeMedium = .70

# taxiRangeHigh: float.  When running in mixedmode, the Taxi uses this value
# to determine if the Fares have been in the queue long enough to send global
# broadcasts.  Valid values are (taxiRangeMedium to 1.00).  Default: 1.00
#taxiRangeHigh = 1.00

# negotiationProtocol: string.  Valid values are FIFO, closestfare, and
# mixedmode.  Default: FIFO
#negotiationProtocol = FIFO
negotiationProtocol = closestfare
#negotiationProtocol = mixedmode

# simType: string.  Valid values are cooperate and compete.  Default:
# cooperate
#simType = cooperate
simType = compete

# distanceCalculation: string.  Valid values are drivingDistance or
# straightLine (hypotenuse).  Default: straightLine
distanceCalculation = drivingDistance
#distanceCalculation = straightLine

# randomSeed: int.  A big number used to seed the random number generator.
# We use this to generate consistent results.  If the seed is used correctly,
# we can run a simulation and get the same results repeatedly.  Default: 0.
randomSeed = 333777

[dev]
# tracing: boolean.  Run simulation with SimPy's tracing enabled?  Default:
# False.
#tracing = True

# debug: boolean.  If True, prints a bunch of extra information to standard
# output.  Default: False
debug = True

# setTrace: boolean.  Debugging aid, for development only.  Use this to set
# something like breakpoints in the code.  Default: False
#setTrace = True

# vim: tw=78
